--  1、创建数据库
create database luffycity charset utf8;
create table class(cid int primary key auto_increment,caption varchar(10),grade_id int,foreign key(grade_id) references class_grade(gid) on delete cascade on update cascade)engine=innodb; -- 创建表
create table student(sid int primary key auto_increment, sname varchar(20), gender varchar(10),class_id int,constraint fk_name foreign key(class_id) references class(cid) on delete cascade on update cascade)engine=innodb;
create table teacher(tid int primary key auto_increment,tname varchar(10) not null)engine=innodb;
create table course(cid int primary key auto_increment,cname varchar(20) not null,teacher_id int,constraint th_name foreign key(teacher_id) references teacher(tid) on delete cascade on update cascade)engine=innodb;

create table class_grade(gid int primary key auto_increment,gname var_char(20) not null)engine=innodb;
create table score(sid int primary key auto_increment,student_id int,foreign key(student_id) references student(sid) on delete cascade on update cascade,course_id int,foreign key(course_id) references course(cid) on delete cascade on update cascade,score varchar(10) not null)engine=innodb;
create table teach2cls(tcid int primary key auto_increment,tid int,foreign key(tid) references teacher(tid) on delete cascade on update cascade,cid int,foreign key(cid) references course(cid) on delete cascade on update cascade)engine=innodb;

alter table class add foreign key(grade_id) references class_grade(gid) on delete cascade on update cascade; 	-- 添加外键关联

--

insert into course(cname,teacher_id) values  # 6门课程
            ('语文',3),
            ('数学',4),
            ('地理',2);

insert into teacher(tname) VALUES ('egon')

insert into class_grade VALUES ('一年级'),('二年级'),('三年级')  -- 添加年级信息
INSERT into class VALUES ('一年一班',1),('二年一班',2),('三年二班',3) -- 添加班级信息
INSERT into student VALUES ('乔丹','女',1),('艾弗森','女',1),('科比','男',2);	-- 添加学生信息
INSERT into teacher VALUES ('张三')，('李四')，('王五');		-- 添加老师信息
INSERT INTO course VALUES('生物',1),('体育',1),('物理',2);
INSERT INTO score VALUE(1,1,60),(1,2,59),(2,2,99)
INSERT into teach2cls VALUES(1,1),(1,2),(2,1),(3,2);

insert into student(sname,gender,class_id) values
('Jane','女',1),
('mike','男',1),
('Jack','男',2),
('Tome','男',2),
('Alice','女',3),
('Lily','女',4),
('Lucy','女',5),
('Jone','男',6),
('Any','女',7),
('库里','男',8),
('大姚','男',9);

 insert into score(student_id,course_id,score) values # 12个学生，6门课程
    ->             (1,1,60),
    ->             (1,2,59),
    ->             (2,4,60),
    ->             (2,5,59),
    ->             (2,6,33),
    ->             (3,1,59),
    ->             (3,5,28),
    ->             (4,4,100),
    ->             (4,6,90),
    ->             (5,4,88),
    ->             (6,5,100),
    ->             (6,6,60),
    ->             (7,3,57),
    ->             (7,5,60),
    ->             (8,2,61),
    ->             (8,4,59),
    ->             (9,1,60),
    ->             (9,2,61),
    ->             (9,3,21),
    ->             (10,5,68),
    ->             (11,1,89),
    ->             (12,3,100),
    -> (13,4,95),
    -> (14,3,98);


insert into teach2cls(tid,cid) values # 4个老师 9个班级
(1,3),
(1,7),
(2,4),
(2,8),
(2,7),
(3,9),
(3,3),
(3,5),
(4,8),
(4,4),
(4,6),
(4,1);

2、查询学生总人数；
SELECT count(*) as '学生总人数' from student ;

3、查询“生物”课程和“物理”课程成绩都及格的学生id和姓名；
select sid,sname from student where sid in (select student_id s from score s left join course c on s.course_id = c.cid and c.cname in('生物','物理') WHERE s.score >= 60);

4、查询每个年级的班级数，取出班级数最多的前三个年级；
SELECT cg.gname as '年级',count(c.grade_id) as '班级数' from class_grade cg LEFT JOIN class c on cg.gid = c.grade_id GROUP BY cg.gname ORDER BY count(c.grade_id) desc LIMIT 3

5、查询平均成绩最高和最低的学生的id和姓名以及平均成绩；

select s.sid,s.sname,c.avg_score from student s
inner join(
select student_id,avg(score) as avg_score
from score
group by student_id
having avg(score)
in (
(
select avg(score) as max_avg_score
from score
group by student_id
order by avg(score) desc limit 1),
(
select avg(score) as min_avg_score
from score
group by student_id
order by avg(score) asc limit 1)
)
)as c on s.sid = c.student_id;

+-----+--------+-----------+
| sid | sname  | avg_score |
+-----+--------+-----------+
|   3 | 科比   |      43.5 |
|  12 | Any    |       100 |
+-----+--------+-----------+


6、查询每个年级的学生人数；

select c.grade_id,count(c.sid) as count_student
from(
select s.sid,cs.grade_id
from student s,class cs
where s.class_id = cs.cid
)as c
group by c.grade_id;
+----------+---------------+
| grade_id | count_student |
+----------+---------------+
|        1 |             7 |
|        2 |             4 |
|        3 |             3 |
+----------+---------------+

7、查询每位学生的学号，姓名，选课数，平均成绩；

mysql> select s.sid,s.sname,count(sc.course_id),avg(sc.score) from student s  left join score sc  on s.sid = sc.student_id group by s.sid order by count(sc.course_id) desc;
+-----+-----------+---------------------+--------------------+
| sid | sname     | count(sc.course_id) | avg(sc.score)      |
+-----+-----------+---------------------+--------------------+
|   2 | 艾弗森    |                   4 |              62.75 |
|   9 | Lily      |                   3 | 47.333333333333336 |
|   8 | Alice     |                   2 |                 60 |
|   3 | 科比      |                   2 |               43.5 |
|   6 | Jack      |                   2 |                 80 |
|  14 | 大姚      |                   2 |               78.5 |
|   1 | 乔丹      |                   2 |               59.5 |
|   4 | Jane      |                   2 |                 95 |
|   7 | Tome      |                   2 |               58.5 |
|  13 | 库里      |                   2 |               77.5 |
|  11 | Jone      |                   1 |                 89 |
|  12 | Any       |                   1 |                100 |
|  10 | Lucy      |                   1 |                 68 |
|   5 | mike      |                   1 |                 88 |
+-----+-----------+---------------------+--------------------+
14 rows in set (0.00 sec)

8、查询学生编号为“2”的学生的姓名、该学生成绩最高的课程名、成绩最低的课程名及分数；

9、查询姓“李”的老师的个数和所带班级数；
mysql> select count(distinct(t.tid)) as '个数',count(ts.cid) as '所带班级数' from teacher t left join teach2cls ts on t.tid = ts.tid where t.tname like ' 李%';
+--------+-----------------+
| 个数   | 所带班级数      |
+--------+-----------------+
|      2 |               4 |
+--------+-----------------+

10、查询班级数小于5的年级id和年级名；
mysql> select gid,gname from class_grade where gid in (select grade_id from class group by grade_id having count(grade_id) < 5);
+-----+-----------+
| gid | gname     |
+-----+-----------+
|   1 | 一年级    |
|   2 | 二年级    |
|   3 | 三年级    |
+-----+-----------+

11、查询班级信息，包括班级id、班级名称、年级、年级级别(12为低年级，34为中年级，56为高年级)，示例结果如下；

班级id	班级名称	年级	年级级别
1	一年一班	一年级	低

SELECT
	c.cid,
	c.caption,
	cg.gid,
	CASE
WHEN cg.gid BETWEEN 1
AND 2 THEN
	'低'
WHEN cg.gid BETWEEN 3
AND 4 THEN
	'中'
WHEN cg.gid BETWEEN 5
AND 6 THEN
	'高'
ELSE
	0
END AS '年级级别'
FROM
	class c,
	class_grade cg
WHERE
	c.grade_id = cg.gid;
+-----+--------------+-----+--------------+
| cid | caption      | gid | 年级级别     |
+-----+--------------+-----+--------------+
|   1 | 一年一班     |   1 | 低           |
|   4 | 一年二班     |   1 | 低           |
|   5 | 一年三班     |   1 | 低           |
|   9 | 一年四班     |   1 | 低           |
|   2 | 二年一班     |   2 | 低           |
|   6 | 二年二班     |   2 | 低           |
|   3 | 三年二班     |   3 | 中           |
|   7 | 三年二班     |   3 | 中           |
|   8 | 三年三班     |   3 | 中           |
+-----+--------------+-----+--------------+
9 rows in set (0.00 sec)

12、查询学过“张三”老师2门课以上的同学的学号、姓名；
 SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			course_id IN (
				SELECT
					c.cid
				FROM
					course c,
					teacher t
				WHERE
					c.teacher_id = t.tid
				AND t.tname = '张三'
			)
		GROUP BY
			student_id
		HAVING
			count(course_id) > 2
	);
Empty set (0.00 sec)

13、查询教授课程超过2门的老师的id和姓名；
SELECT
	tid,
	tname
FROM
	teacher t
LEFT JOIN course c ON t.tid = c.teacher_id
GROUP BY
	c.teacher_id
HAVING
	count(c.teacher_id) >= 2
14、查询学过编号“1”课程和编号“2”课程的同学的学号、姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			course_id IN (1, 2)
	)
15、查询没有带过高年级的老师id和姓名；

16、查询学过“张三”老师所教的所有课的同学的学号、姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			course_id IN (
				SELECT
					c.cid
				FROM
					course c,
					teacher t
				WHERE
					c.teacher_id = t.tid
				AND t.tname = '张三'
			)

	);
17、查询带过超过2个班级的老师的id和姓名；
SELECT
	t.tid,
	t.tname
FROM
	teacher t
LEFT JOIN teach2cls ts ON t.tid = ts.tid
GROUP BY
	ts.tid
HAVING
	count(ts.cid) > 2

18、查询课程编号“2”的成绩比课程编号“1”课程低的所有同学的学号、姓名；

19、查询所带班级数最多的老师id和姓名；
SELECT
	t.tid,
	t.tname
FROM
	teacher t
LEFT JOIN teach2cls ts ON t.tid = ts.tid
GROUP BY
	ts.tid
ORDER BY
	count(ts.cid) DESC
LIMIT 1

20、查询有课程成绩小于60分的同学的学号、姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			score < 60
	)

21、查询没有学全所有课的同学的学号、姓名；

22、查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名；

23、查询至少学过学号为“1”同学所选课程中任意一门课的其他同学学号和姓名；

24、查询和“2”号同学学习的课程完全相同的其他同学的学号和姓名；

25、删除学习“张三”老师课的score表记录；

26、向score表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“2”课程的同学学号；②插入“2”号课程的平均成绩；

27、按平均成绩从低到高显示所有学生的“语文”、“数学”、“英语”三门的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；

28、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；

29、按各科平均成绩从低到高和及格率的百分数从高到低顺序；

30、课程平均分从高到低显示（现实任课老师）；